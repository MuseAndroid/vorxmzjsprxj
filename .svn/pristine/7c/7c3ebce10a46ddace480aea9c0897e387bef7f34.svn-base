//
//  PushReceiver.m
//
//

#import "PushReceiver.h"
#import <MPush/PushManager.h>
#import <MPUsh/PushNotification.h>
#import <MPush/PushNotificationCenter.h>


typedef void(^PushReceiverExtLoadHandler)(BOOL success, NSString *richData, NSError *error);

@interface PushReceiver () <PushManagerDelegate>

@end

@implementation PushReceiver

- (id)init {
    self = [super init];
    if (self) {
        [PushManager defaultManager].enabled = YES;
    }
    return self;
}

- (void)manager:(PushManager *)manager didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
    
}

- (void)manager:(PushManager *)manager didLoadPushInfo:(PushManagerInfo *)pushInfo {
    NSLog( @"PushReceiver - manager didLoadPushInfo: %@", pushInfo );
}

- (void)managerDidRegisterForRemoteNotifications:(PushManager *)manager userInfo:(NSDictionary *)userInfo {
    NSLog( @"PushReceiver - managerDidRegisterForRemoteNotifications userInfo: %@", userInfo );
}


- (void)manager:(PushManager *)manager didReceiveUserNotification:(NSDictionary *)userInfo status:(NSString *)status messageUID:(NSString *)messageUID {    
    
    PPDebug( @"UserNotification : %@", userInfo );

    NSDictionary *apsInfo = [userInfo objectForKey:@"aps"];
    
    NSString *extHTML = [[userInfo objectForKey:@"mps"] objectForKey:@"ext"];
    
    NSLog( @"extHTML :%@", extHTML );
    
    if ( extHTML != nil && [extHTML hasSuffix:@"_msp.html"] ) {
        [self loadExtData:extHTML handler:^(BOOL success, NSString *richData, NSError *error) {
            NSLog( @"richData : %@", richData );
            
            NSMutableDictionary *notification = [NSMutableDictionary dictionaryWithDictionary:userInfo];
            NSMutableDictionary *mspData = [NSMutableDictionary dictionaryWithDictionary:[notification objectForKey:@"mps"]];
            [mspData setObject:richData forKey:@"ext"];
            [notification setObject:mspData forKey:@"mps"];
            
            NSLog( @"notification: %@", notification );
            
            [self onReceiveNotification:[NSDictionary dictionaryWithDictionary:notification] status:status messageUID:messageUID];
        }];
    }
    else {
        [self onReceiveNotification:userInfo status:status messageUID:messageUID];
    }
}

- (void)loadExtData:(NSString *)extHTML handler:(PushReceiverExtLoadHandler)handler {
    
    NSURL *url = [NSURL URLWithString:extHTML];
    
    if (!url) {
        handler(NO, extHTML, nil);
        return;
    }
    
    [NSURLConnection sendAsynchronousRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:extHTML]]
                                       queue:[NSOperationQueue mainQueue]
                           completionHandler:^(NSURLResponse *response, NSData *data, NSError *connectionError) {
                               
                               if ( connectionError != nil ) {
                                   dispatch_async(dispatch_get_main_queue(), ^{
                                       handler(NO, extHTML, connectionError);
                                   });
                                   return;
                               }
                               
                               NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse *)response;
                               
                               if ( httpResponse.statusCode != 200 ) {
                                   dispatch_async(dispatch_get_main_queue(), ^{
                                       handler(NO, extHTML, nil);
                                   });
                                   return;
                               }
                               
                               NSStringEncoding textEncoding = ( [response textEncodingName] ) ? [response textEncodingName].encodingValue : NSUTF8StringEncoding;
                               
                               NSString *result = [[NSString alloc] initWithData:data encoding:textEncoding];
                               NSString *richData = [NSString stringWithString:result];
                               
                               richData = [richData stringByRemovingPercentEncoding];
                               
//                               [result release];
                               
                               dispatch_async(dispatch_get_main_queue(), ^{
                                   handler(YES, richData, nil);
                               });
                           }];
}

- (void)onReceiveNotification:(NSDictionary *)notification status:(NSString *)status messageUID:(NSString *)messageUID {
    PPNavigationController *navigationController = [PPNavigationController ppNavigationController];
    PPWebViewController *current = (PPWebViewController *)navigationController.currentViewCtrl;
    
//    while ( navigationController.isAnimating ) {
//        [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];
//    }
    
//    NSString *payload = [notification jsonString];
//    NSString *pushType = @"APNS";
    
    NSString *body = [[[notification objectForKey:@"aps"] objectForKey:@"alert"] objectForKey:@"body"];
    NSString *codeStr = [[[notification objectForKey:@"mps"] objectForKey:@"ext"] componentsSeparatedByString:@"|"][1];
    NSData *jsonData = [codeStr dataUsingEncoding:NSUTF8StringEncoding];
    NSError *error;
    NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingAllowFragments error:&error];
//    NSDictionary *dic = [codeStr objectFromJsonString];
    NSString *code = [[dic objectForKey:@"data"] objectForKey:@"code"];
    NSString *msg = [[dic objectForKey:@"data"] objectForKey:@"msg"];
    
    NSDictionary *result = @{
                             @"body":body,
                             @"data":@{
                                 @"code":code,
                                 @"msg":msg
                                 }
                             };
    NSString *resultStr = [result jsonString];
    
    [[PushManager defaultManager].notificationCenter setBadgeNumber:0];
    [[PushManager defaultManager] read:nil notification:notification completionHandler:^(BOOL success) {
        NSLog(@"success");
    }];
    
    [current callCbfunction:@"onReceiveAndroidNotification" withObjects:resultStr, nil];
//    [current callCbfunction:@"onReceiveAndroidNotification" withObjects:@{@"status":status, @"payload":[payload objectFromJsonString], @"type":pushType, @"messageUID": messageUID}, nil];

}

/*
 #pragma mark - Navigation
 
 // In a storyboard-based application, you will often want to do a little preparation before navigation
 - (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
 // Get the new view controller using [segue destinationViewController].
 // Pass the selected object to the new view controller.
 }
 */

@end
